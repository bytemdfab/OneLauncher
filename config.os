///////////////////////////////////////////////////////////////////////////////////
// КОНФИГУРАЦИЯ ЗАПУСКА 1С:Предприятия 8
//

Перем мПараметрыЗапуска;
Перем мПуть;

///////////////////////////////////////////////////////////////////////////////////
// Экспортные методы
//

// Установка конфигурации

Функция Платформа(Знач ВерсияПлатформы) Экспорт
	
	мПараметрыЗапуска.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ПутьКПлатформе(Знач ПутьКПлатформе) Экспорт
	
	мПараметрыЗапуска.Вставить("ПутьКПлатформе", мПуть.Составить(ПутьКПлатформе));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Предприятие(Знач Режим = "Обычный") Экспорт
	
	мПараметрыЗапуска.Вставить("Предприятие", Истина);
	мПараметрыЗапуска.Вставить("РежимПредприятия", Режим);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Конфигуратор() Экспорт
	
	мПараметрыЗапуска.Вставить("Конфигуратор", Истина);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция СозданиеИБ(Знач ПутьКШаблону = Неопределено) Экспорт
	
	мПараметрыЗапуска.Вставить("СозданиеИБ", Истина);
	
	Если ЗначениеЗаполнено(ПутьКШаблону) Тогда
		мПараметрыЗапуска.Вставить("ПутьКШаблону", мПуть.Составить(ПутьКШаблону));
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ФайловаяБаза(Знач ПутьКБазе) Экспорт
	
	мПараметрыЗапуска.Вставить("ФайловаяБаза", мПуть.Составить(ПутьКБазе));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция СервернаяБаза(Знач Сервер, Знач ИмяБазы) Экспорт
	
	мПараметрыЗапуска.Вставить("СервернаяБаза", Новый Структура("Сервер, ИмяБазы", Сервер, ИмяБазы));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция СтрокаСоединения(Знач СтрокаСоединения) Экспорт
	
	мПараметрыЗапуска.Вставить("СтрокаСоединения", СтрокаСоединения);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Авторизация1С(Знач ИмяПользователя, Знач Пароль) Экспорт
	
	мПараметрыЗапуска.Вставить("Авторизация1С", Истина);
	мПараметрыЗапуска.Вставить("ИмяПользователя", ИмяПользователя);
	мПараметрыЗапуска.Вставить("Пароль", Пароль);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция АвторизацияWindows() Экспорт
	
	мПараметрыЗапуска.Вставить("АвторизацияWindows", Истина);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция КлючДоступа(Знач КлючДоступа = "") Экспорт
	
	мПараметрыЗапуска.Вставить("ИспользоватьКлючДоступа", Истина);
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		мПараметрыЗапуска.Вставить("КлючДоступа", КлючДоступа);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция РежимОтладки(Знач URLОтладчика = Неопределено) Экспорт
	
	мПараметрыЗапуска.Вставить("Отладка", Истина);
	Если ЗначениеЗаполнено(URLОтладчика) Тогда
		мПараметрыЗапуска.Вставить("URLотладчика", URLОтладчика);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Аргумент(Знач ЗначениеАргумента) Экспорт
	
	мПараметрыЗапуска.Аргументы.Добавить(ЗначениеАргумента);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ФайлВывода(Знач ПутьКФайлу) Экспорт
	
	мПараметрыЗапуска.Вставить("ФайлВывода", мПуть.Составить(ПутьКФайлу));
	
КонецФункции

// Обработка конфигурации

Функция ЗапускВозможен() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция КоманднаяСтрока() Экспорт
	
	Состав = Новый Массив();
	
	Если Если мПараметрыЗапуска.Свойство("ПутьКПлатформе") Тогда
		Состав.Добавить(мПараметрыЗапуска.ПутьКПлатформе);
	ИначеЕсли мПараметрыЗапуска.Свойство("ВерсияПлатформы") Тогда
		Состав.Добавить(ПолучитьПутьКВерсииПлатформы(мПараметрыЗапуска.ВерсияПлатформы));
	Иначе
		ВызватьИсключение "Не указан путь к платформе!";
	КонецЕсли;
	
	Если мПараметрыЗапуска.Свойство("Предприятие") И мПараметрыЗапуска.Предприятие Тогда
		
		Состав.Добавить("ENTERPRISE");
		
		Если мПараметрыЗапуска.Свойство("РежимПредприятия") Тогда
			
			Если мПараметрыЗапуска.РежимПредприятия = "Обычный" Тогда
				Состав.Добавить("/RunModeOrdinaryApplication");
			ИначеЕсли мПараметрыЗапуска.РежимПредприятия = "ТолстыйКлиентУправляемый" Тогда
				Состав.Добавить("/RunModeManagedApplication");
			КонецЕсли;
			
		КонецЕсли;
		
		Если мПараметрыЗапуска.Свойство("РежимОтладки") И мПараметрыЗапуска.РежимОтладки Тогда
			
			Состав.Добавить("/Debug");
			
			Если мПараметрыЗапуска.Свойство("URLОтладчика") Тогда
				Состав.Добавить("/DebuggerURL "+мПараметрыЗапуска.URLОтладчика);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли мПараметрыЗапуска.Свойство("Конфигуратор") И мПараметрыЗапуска.Конфигуратор Тогда
		Состав.Добавить("DESIGNER");
	ИначеЕсли мПараметрыЗапуска.Свойство("СозданиеИБ") И мПараметрыЗапуска.СозданиеИБ Тогда
		Состав.Добавить("CREATEINFOBASE");
	Иначе
		ВызватьИсключение "Не указан режим запуска!";
	КонецЕсли;
	
	Состав.Добавить("/IBConnectionString");
	
	Если мПараметрыЗапуска.Свойство("ФайловаяБаза") Тогда
		Состав.Добавить("File="+мПараметрыЗапуска.ФайловаяБаза+";");
	ИначеЕсли мПараметрыЗапуска.Свойство("СервернаяБаза") Тогда
		ПараметрыСервернойИБ = мПараметрыЗапуска.СервернаяБаза;
		Состав.Добавить("Srvr=" + ПараметрыСервернойИБ.Сервер + ";Ref=" + ПараметрыСервернойИБ.ИмяБазы+";");
	ИначеЕсли мПараметрыЗапуска.Свойство("СтрокаСоединения") Тогда
		Состав.Добавить(мПараметрыЗапуска.СтрокаСоединения);
	Иначе
		ВызватьИсключение "Не указана ИБ для запуска!";
	КонецЕсли;
	
	Если мПараметрыЗапуска.Свойство("Авторизация1С") И мПараметрыЗапуска.Авторизация1С Тогда
		
		Состав.Добавить("/N "+мПараметрыЗапуска.ИмяПользователя);
		Состав.Добавить("/P "+мПараметрыЗапуска.Пароль);
		
	Иначе
		Состав.Добавить("/WA+");
	КонецЕсли;
	
	Если мПараметрыЗапуска.Свойство("ИспользоватьКлючДоступа") И мПараметрыЗапуска.ИспользоватьКлючДоступа Тогда
		
		Состав.Добавить("/UC");
		
		Если мПараметрыЗапуска.Свойство("КлючДоступа") Тогда
			Состав.Добавить(мПараметрыЗапуска.КлючДоступа);
		КонецЕсли;
	КонецЕсли;
	
	Состав.Добавить("/DisableStartupMessages");
	Состав.Добавить("/DisableStartupDialogs");

	Для каждого Аргумент Из мПараметрыЗапуска.Аргументы Цикл
		Состав.Добавить(Аргумент);
	КонецЦикла;
	
	Состав.Добавить("/Out "+мПараметрыЗапуска.ФайлВывода);
	
	КоманднаяСтрока = "";
	Для каждого Аргумент Из Состав Цикл
		КоманднаяСтрока = КоманднаяСтрока + Аргумент + " ";
	КонецЦикла;
	
	КоманднаяСтрока = Лев(КоманднаяСтрока, СтрДлина(КоманднаяСтрока)-1);
	
	Возврат КоманднаяСтрока;
	
КонецФункции

Функция ПолучитьФайлВывода() Экспорт
	Возврат мПараметрыЗапуска.ФайлВывода;
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Служебные
//

Функция ПолучитьПутьКВерсииПлатформы(Знач ВерсияПлатформы) Экспорт

    Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
        ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
    КонецЕсли;  

    путьProgramFiles = "C:\Program Files (x86)\";
    файлProgramFiles = Новый Файл(путьProgramFiles);
    Если Не файлProgramFiles.Существует() Тогда
        путьProgramFiles = "C:\Program Files\";
        файлProgramFiles = Новый Файл(путьProgramFiles);
        Если Не файлProgramFiles.Существует() Тогда
            ВызватьИсключение "Должен существовать путь к Program Files или Program Files (86)";
        КонецЕсли;

    КонецЕсли;

    СписокСтрок = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы, ".");
    Если СписокСтрок.Количество() < 2 Тогда
        ВызватьИсключение "Маска версии платформы должна содержать, как минимум, минорную и мажорную версию, т.е. Maj.Min[.Release][.Build]";
    КонецЕсли;

    МажорнаяВерсия = СписокСтрок[0];
    МинорнаяВерсия = СписокСтрок[1];

    Если МинорнаяВерсия = "3" Тогда // 8.3
        путьКПлатформе = путьProgramFiles + "1cv8\";
    ИначеЕсли МинорнаяВерсия = "2" Тогда // 8.2
        путьКПлатформе = путьProgramFiles + "1cv82\";   
    ИначеЕсли МинорнаяВерсия = "1" Тогда // 8.1
        путьКПлатформе = путьProgramFiles + "1cv81\";
    Иначе
        ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
    КонецЕсли;

    МассивФайлов = НайтиФайлы(путьКПлатформе, версияПлатформы+"*");
    Если МассивФайлов.Количество() = 0 Тогда
        парамОписаниеОшибки = "Не найден путь к платформе 1С <"+версияПлатформы+">";
        Возврат "";
    КонецЕсли;

    ИменаВерсий = Новый Массив;
    Для Каждого ЭлементМассива Из МассивФайлов Цикл
        правыйСимвол = Прав(ЭлементМассива.Имя,1);
        Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
            Продолжить;
        КонецЕсли;
        ИменаВерсий.Добавить(ЭлементМассива.Имя);
    КонецЦикла;

    МаксВерсия = ИменаВерсий[0];
    Для Сч = 1 По ИменаВерсий.Количество()-1 Цикл
        Если МаксВерсия < ИменаВерсий[Сч] Тогда
            МаксВерсия = ИменаВерсий[Сч];
        КонецЕсли;
    КонецЦикла;

    НужныйПуть = Новый Файл(путьКПлатформе + МаксВерсия + "\bin\1cv8.exe");
    Если Не НужныйПуть.Существует() Тогда
        ВызватьИсключение "Ошибка определения версии платформы. Файл <"+НужныйПуть.ПолноеИмя+"> не существует";
    КонецЕсли;

    Возврат мПуть.Составить(НужныйПуть.ПолноеИмя);

КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель)

	МассивПодстрок = Новый Массив;
	ОстатокСтроки = ИсходнаяСтрока;
	
	Поз = -1;
	Пока Поз <> 0 Цикл
	
		Поз = Найти(ОстатокСтроки, Разделитель);
		Если Поз > 0 Тогда
			Подстрока = Лев(ОстатокСтроки, Поз-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Поз+1);
		Иначе
			Подстрока = ОстатокСтроки;
		КонецЕсли;
		
		МассивПодстрок.Добавить(Подстрока);
	
	КонецЦикла;
	
	Возврат МассивПодстрок;

КонецФункции

Функция КаталогСценария()

	ПутьКФайлуСценария = ТекущийСценарий().Источник;

	Состав = РазложитьСтрокуВМассивПодстрок(ПутьКФайлуСценария, "\");

	Каталог = "";

	Для Инд = 0 По Состав.Количество()-2 Цикл
		НуженРазделитель = ЗначениеЗаполнено(Каталог) И ЗначениеЗаполнено(Состав[Инд]);
		Разделитель = ?(НуженРазделитель, "\", "");
		Каталог = Каталог + Разделитель + Состав[Инд];
	КонецЦикла;

	Возврат Каталог;

КонецФункции

Процедура Инициализация()
	
	Попытка
		ТипПостроитель = Тип("ПостроительПути");
	Исключение
		ПодключитьСценарий(КаталогСценария() + "\path.os", "ПостроительПути");
	КонецПопытки;

	мПуть = Новый ПостроительПути;

	мПараметрыЗапуска = Новый Структура();
	мПараметрыЗапуска.Вставить("Аргументы", Новый Массив());
	мПараметрыЗапуска.Вставить("ФайлВывода", мПуть.Составить(КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор()) + ".log"));
	
КонецПроцедуры

Инициализация();
